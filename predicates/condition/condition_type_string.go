// Code generated by "stringer -type=ConditionType -output=condition_type_string.go"; DO NOT EDIT.

package condition

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EQ-0]
	_ = x[NOT-1]
	_ = x[GT-2]
	_ = x[LT-3]
	_ = x[GTE-4]
	_ = x[LTE-5]
	_ = x[HAS-6]
	_ = x[LACKS-7]
	_ = x[TRUE-8]
	_ = x[FALSE-9]
	_ = x[MATCHES-10]
	_ = x[RANGE-11]
	_ = x[EMPTY-12]
	_ = x[NOT_EMPTY-13]
	_ = x[SUBSET_OF-14]
	_ = x[UNIQUE-15]
	_ = x[HAS_ANY-16]
	_ = x[BEFORE-17]
	_ = x[AFTER-18]
	_ = x[UNTIL-19]
	_ = x[SINCE-20]
	_ = x[VALID-21]
	_ = x[SAME-22]
	_ = x[DIFFERENT-23]
	_ = x[WITHIN-24]
	_ = x[FUTURE-25]
	_ = x[UNKNOWN-26]
}

const _ConditionType_name = "EQNOTGTLTGTELTEHASLACKSTRUEFALSEMATCHESRANGEEMPTYNOT_EMPTYSUBSET_OFUNIQUEHAS_ANYBEFOREAFTERUNTILSINCEVALIDSAMEDIFFERENTWITHINFUTUREUNKNOWN"

var _ConditionType_index = [...]uint8{0, 2, 5, 7, 9, 12, 15, 18, 23, 27, 32, 39, 44, 49, 58, 67, 73, 80, 86, 91, 96, 101, 106, 110, 119, 125, 131, 138}

func (i ConditionType) String() string {
	if i < 0 || i >= ConditionType(len(_ConditionType_index)-1) {
		return "ConditionType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ConditionType_name[_ConditionType_index[i]:_ConditionType_index[i+1]]
}
